# This cloudbuild.yaml is configured for a pnpm monorepo.
steps:
  # Step 0: Use a full Ubuntu image to install rsync and copy the source code to a clean directory.
  # This avoids issues with symlinks in the root node_modules directory.
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y rsync
        rsync -a --exclude '**/node_modules' --exclude '.git' /workspace/ /workspace/clean_source/

  # Step 1: Build the web container image from the clean source directory.
  - name: 'gcr.io/cloud-builders/docker'
    dir: '/workspace/clean_source/apps/web' # Run this step inside the web app's directory.
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/web:${_TAG}'
      - '-f'
      - 'Dockerfile'
      - '../..' # The build context is the root of the clean source directory.

  # Step 2: Build the api container image from the clean source directory.
  - name: 'gcr.io/cloud-builders/docker'
    dir: '/workspace/clean_source/apps/api' # Run this step inside the api app's directory.
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/api:${_TAG}'
      - '-f'
      - 'Dockerfile'
      - '../..' # The build context is the root of the clean source directory.

  # Step 3: Push the web container image to Artifact Registry.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/web:${_TAG}']

  # Step 4: Push the api container image to Artifact Registry.
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/api:${_TAG}']

  # Step 5: Deploy the web container to Cloud Run.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'web' # The name of your web service
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/web:${_TAG}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--quiet'

  # Step 6: Deploy the api container to Cloud Run.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'api' # The name of your api service
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/api:${_TAG}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--quiet'

images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/web:${_TAG}'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/api:${_TAG}'

substitutions:
  _REGION: 'us-central1'
  _REPO_NAME: 'sabq2025cloud'
  _TAG: 'latest'

options:
  logging: CLOUD_LOGGING_ONLY
